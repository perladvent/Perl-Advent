Title: speeding up the inter-web
Topic: HTTP::Caching
Author: Theo van Hoesel <Th.J.v.Hoesel@gmail.com>

=pod

So, after years using mainframes to get the job done and later using monolithic
applications, it became time to have a more lean architecture. Service Oriented
Architectures or Reactive Microservices or ...

So some hard working elves got all excited with their new task and had been
dancing for days and started to build some nice REST-api with Dancer2. And as
good developers do, the elves made first a working proof of concept... and then
made it even fast. But the biggest speed increase was not in writing optimised
code, it was in making sure that the services wouldn't get overloaded with
repeating request when nothing had changed.

Let caches temporarily store the responses!

So, since the elves simply added two plugins for their Dancer app, now the Santa
Network Operations Centre is all fine and the more complicated services can ask
smaller micro-services to perform a even tinier task .... super fast thanks to
caching.

Dancer2 example here

But then, the Santa NOC elves were not getting the results they expected,
requests and responses did go back and forth, as if ... nothing was cached. One
reason was that unlike external communication, internally nothing was cached at
all


LWP::UserAgent::Caching::Simple