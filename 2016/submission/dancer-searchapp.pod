Title: Finding with Dancer::SearchApp
Topic: Dancer::SearchApp
Author: Corion <corion@cpan.org>

=pod

=encoding utf8

=head1 Finding gifts instead of searching

Many children are under the assumption that Santa needs to work only
one day a year, when he distributes all the gifts across the world. But
there is a lot of work that has to go into the preparation for this day.
Especially the choice of gifts is an issue - while Santa knows who's been
naughty and who's been nice, he also has a list of the wishes of each child.
Santa also needs to monitor closely the demand and availability of gifts
to match the wishes to the gifts.

Of course, Santa's suppliers provide even
the most festive descriptions of the items.  The sheer supply
of possible gifts makes it difficult even
for Santa and his elves to remember the numbering schemes
and descriptions of the various items. And as the wishes and potential
gifts come in at a time when the preparations are already in full swing
and Christmas is close, there is little time to dedicate elves to categorizing
the gifts.

=head2 Finding things

Ideally, any of the elves could use some kind of search engine
to find an appropriate gift for a child.
Of course, companies like Google already provide a solution to finding the most
appropriate thing in the stack of proposed gifts for a wish of a child. But
Santa is peculiar about sharing his knowledge with others. While he knows who's
going to get their wish and who's going to get coal, he feels that sharing that
knowledge with other parties is not a good approach. What is known at the
North Pole stays at the North Pole.

So his approach is to use L<Dancer::SearchApp> to build his own search engine.

=head2 Parts

The search engine consists of three parts

=head3 Crawler

The crawler is responsible for reading all the information about gifts
and storing it in the index. Currently, the module comes with two crawlers,
one for the filesystem and one for an IMAP store. Both crawlers take all items,
read them and extract the text from them and write them to the search index.

I<what data is stored for each document?>

=head3 Index

The search index is provided by the Elasticsearch search index, with
L<Search::Elasticsearch> as the Perl interface. The index is a data structure
that allows for quick retrieval of documents given some words that are
associated with the documents. 
When storing the document information, Elasticsearch also adds more data
like synonyms so that the wish for I<a tricycle> can also find
I<ASIN20161225, vehicle, three wheeled> or other synonyms.

=head3 Searchform

The front end is provided by a Dancer application. It consists mostly
of a form field where elves enter the wish and submit the query. The L<Dancer>
application that leverages the Elasticsearch index and search functionality
and returns word completion and matching documents for each query.

=head2 Filesystem Crawler

    File::Find

    Apache::Tika::Async for text extraction

    Special extraction for mp3 and images
    using Audio::MP3 ? and Image::Info?

    Done

=head2 IMAP / Mail crawler

    Net::IMAPClient

    Metadata extraction not merged with filesystem

    Done
