Title: Growing Christmas Trees
Topic: SVG (and SVG::ChristmasTree)
Author: Dave Cross <dave@perlhacks.com>

=head1 Growing Christmas Trees

ElfName was in a bit of a panic. She had been given the job of producing a
series of designs for this year's North Pole Christmas cards and so far she
had made no progress. And the print deadline was approaching fast.

The problem was just too complex. It wasn't just a case of taking a mildly
embarrassing photo of the Clauses and then printing that on hundreds of cards.
No, Santa had decided that he didn't want a photo this year. He wanted cute
graphics of Christmas trees. Also (and this was the hard part), he wanted
dozens of different designs with different numbers of tree and tree of many
different sizes. There just wasn't time to create that many designs.

[ Invent silly situation which introduces Elf to the idea of SVG. ]

=head2 Two Types of Graphics

Most image files that we come across every day are B<raster> images. Basically,
the image is made up of a two-dimensional grid of points
(called B<picture elements> or B<pixels>). Each pixel is set to be a
particular colour and when we look at the complete set of coloured pixels, we
see it as an image.

Raster images are great for many uses. All of the JPG and PNG and GIF images
that you come across every say on the internet are raster images. But they
have a couple of downsides - one of which is that they don't scale very well.
When you view a raster image at the intended size, you don't see the
inidividual pixels. But as you scale up the image, there will come a point
where each pixel becomes large enough to be seen. Initially, you might notice
that a straight edge starts to look a bit jagged. Eventually, you'll see every
pixel and the image turns into an unrecognisable pile of squares.

Vector images are different. Vector images don't contain instructions saying
that "this pixel is red" or "that pixel is blue". They contain higher level
instructions like "draw a red circle with this radius, centred on this point".
And as you scale up the drawing area, those instructions remain just as valid.
You'll get a bigger circle, but one that is still drawn with sharp edges.

SVG (for "Scalable Vector Graphics") is an XML format for describing vector
graphic. It has become very popular on the web and many browsers now have
build-in support for displaying SVG images.

Not all images are suitable for being represented in the SVG format. As an
SVG image is made up of lots (possibly hundreds) of shapes, something like a
photo doesn't really work in this format. But if you can describe your image
in terms of the shapes that make it up, then it would be a good candidate for
being turned into an SVG document.

For example, a cartoon representation of a Christmas tree.

=head2 Varying the Design

But that only gets us part of the way there. ElfName needs to produce many
different designs of her Christmas tree. How does SVG help us there?

An SVG document isn't so much a description of an image. It's more of a recipe
that tells you how to produce the image. And when you have a recipe, it's easy
to vary parts of the recipe in order to vary the results we get out at the
end. So we need to write a program which generates various different Christmas
trees, depending on its input parameters. And, luckily, there is a CPAN module
called SVG which we can use to output SVG documents.

Let's think a little about what we need to draw a Christmas tree. I'm
planning on something like this:

[ insert image of tree ]

The main tree is four triangles. There's a brown rectangle at the bottom for
the trunk and, below that, a red trapezium for the pot. There are a number
of circles for baubles, a few curves to represent tinsel and, finally, a star
on top. All of these can be described simply and, therefore, represented in
SVG.

What variables might we want to alter.

=over 4

=item *

The number of triangles in the bofy of the tree.

=item *

The angle at the top of each of the triangles.

=item *

The length of the trunk.

=item *

The number and colours of the baubles.

=item *

The colour of the tinsel.

=item *

The number of points on the star.

=back
