Author: Csaba Sim√ndi <x1m4nd1@gmail.com>
Title: Lapland Packaging Department
Topic: Carton aka Bundler for Perl

=encoding utf8

=head1 Lapland Packaging Department

Tonttu got the assignment from Joulupukki aka Santa - just to keep it simple - to introduce a standardized packaging solution for the Korvatunturi Logistics Department.
The task was challenging, as there were isolated LAN networks in the main building in Korvatunturi Logistics Department. Only one machine per network segment had direct access to the internet, so there was no chance to use tools like cpan or cpanm for the task at hand on every server... In order for the logistics software to work, Tonttu needed to make sure, that all the modules are distributed to all machines in all network segments.
Tonttu choose the Carton module to accomplish the task and he choose wisely. Carton can handle dependencies, install modules automatically when sources are available.
He started to do some testing and cooked up the follow proof of concenpt for Santa for the first part:

=head2 Task 1: Installing Carton on all servers.

There are two ways to do so, either you install Carton via cpan or cpanm command on a machine, where access to the metacpan is available or You compile Your package from source. 
The latter option is described next.
NOTE: This method can be used to compile any module manually on Linux!

First make sure, that PERL5LIB is loaded, if not load it with export C<PERL5LIB=/path/to/your/perl> (especially if you have Perl installed to a custom location).
	$ echo $PERL5LIB
	/home/cabox/perl5/lib/perl5

Download the Carton package for the installation:
	$ wget https://cpan.metacpan.org/authors/id/M/MI/MIYAGAWA/Carton-v1.0.35.tar.gz

Untar the archive:

	tar -xzvf Carton-v1.0.35.tar.gz

Switch to the directory of the module's source:
	$ cd Carton-v1.0.35

Execute Makefile.PL with Perl.

	$ perl Makefile.PL
	Checking if your kit is complete...
	Looks good
	Generating a Unix-style Makefile
	Writing Makefile for Carton
	Writing MYMETA.yml and MYMETA.json

Then execute make and make install.
	$ make
	cp lib/Carton/Doc/List.pod blib/lib/Carton/Doc/List.pod
	cp lib/Carton/Environment.pm blib/lib/Carton/Environment.pm
	cp lib/Carton/Doc/FAQ.pod blib/lib/Carton/Doc/FAQ.pod
	cp lib/Carton/Packer.pm blib/lib/Carton/Packer.pm
	cp lib/Carton/CLI.pm blib/lib/Carton/CLI.pm
	cp lib/Carton/Dist.pm blib/lib/Carton/Dist.pm
	cp lib/Carton/Doc/Fatpack.pod blib/lib/Carton/Doc/Fatpack.pod
	cp lib/Carton/Util.pm blib/lib/Carton/Util.pm
	cp lib/Carton/Doc/Upgrading.pod blib/lib/Carton/Doc/Upgrading.pod
	cp lib/Carton/Error.pm blib/lib/Carton/Error.pm
	cp lib/Carton/Snapshot/Parser.pm blib/lib/Carton/Snapshot/Parser.pm
	cp lib/Carton/Doc/Update.pod blib/lib/Carton/Doc/Update.pod
	cp lib/Carton/Doc/Exec.pod blib/lib/Carton/Doc/Exec.pod
	cp lib/Carton/Mirror.pm blib/lib/Carton/Mirror.pm
	cp lib/Carton/Dist/Core.pm blib/lib/Carton/Dist/Core.pm
	cp lib/Carton.pm blib/lib/Carton.pm
	cp lib/Carton/Doc/Version.pod blib/lib/Carton/Doc/Version.pod
	cp lib/Carton/CPANfile.pm blib/lib/Carton/CPANfile.pm
	cp lib/Carton/Doc/Tree.pod blib/lib/Carton/Doc/Tree.pod
	cp lib/Carton/Snapshot/Emitter.pm blib/lib/Carton/Snapshot/Emitter.pm
	cp lib/Carton/Dependency.pm blib/lib/Carton/Dependency.pm
	cp lib/Carton/Doc/Show.pod blib/lib/Carton/Doc/Show.pod
	cp lib/Carton/Doc/Install.pod blib/lib/Carton/Doc/Install.pod
	cp lib/Carton/Doc/Bundle.pod blib/lib/Carton/Doc/Bundle.pod
	cp lib/Carton/Tree.pm blib/lib/Carton/Tree.pm
	cp lib/Carton/Package.pm blib/lib/Carton/Package.pm
	cp lib/Carton/Index.pm blib/lib/Carton/Index.pm
	cp lib/Carton/Doc/Check.pod blib/lib/Carton/Doc/Check.pod
	cp lib/Carton/Snapshot.pm blib/lib/Carton/Snapshot.pm
	cp lib/Carton/Builder.pm blib/lib/Carton/Builder.pm
	cp script/carton blib/script/carton
	"/home/cabox/perl5/perlbrew/perls/perl-5.28.0/bin/perl" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/carton
	Manifying 1 pod document
	Manifying 13 pod documents
	cabox@box-codeanywhere:~/workspace/Carton-v1.0.35$ make install
	Manifying 1 pod document
	Manifying 13 pod documents
	Installing /home/cabox/perl5/lib/perl5/Carton.pm
	Installing /home/cabox/perl5/lib/perl5/Carton/Snapshot.pm
	Installing /home/cabox/perl5/man/man1/carton.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Tree.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Check.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Install.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Exec.0
	Installing /home/cabox/perl5/man/man3/Carton.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Bundle.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::FAQ.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Show.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Fatpack.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::List.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Upgrading.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Version.0
	Installing /home/cabox/perl5/man/man3/Carton::Doc::Update.0
	Appending installation info to /home/cabox/perl5/lib/perl5/x86_64-linux/perllocal.pod

If You are presented with errors in the output of make install, there might be a dependency error but it is very unlikely to get such issues with Carton.
DISCLAIMER: You might face dependency hell with other modules using this method, that's why it is recommended to use cpan or cpanm wherever and whenever possible.

Carton installed, You are ready to proceed to Task 2.

=head2 Task 2. - Preparing the package

Create a cpanfile for your project, listing all the used modules (of course only the one's not part of the Perl core, but installed extra).
In the first line list the minimum required Perl version for his project - if any.

	# cpanfile
	requires 'perl', '5.20.0';
	requires 'Getopt::Long';
	requires 'Data::Dumper';
	requires 'Log::Log4perl';
	requires 'MIME::Lite';
	requires 'MIME::Types';
	requires 'Mail::Address';
	requires 'Net::SCP';
	requires 'JSON';
	requires 'DBI';
	requires 'Excel::Writer::XLSX';

As You can see, only a handfull of modules are listed, Carton will take care of the depenencies for us, automatically.

Next step is to "install" the modules inside the local/directory. 

	$ carton install
	Installing modules using /home/cabox/workspace/projects/test_carton/cpanfile
	Successfully installed Archive-Zip-1.68
	Successfully installed Excel-Writer-XLSX-1.09
	Successfully installed Net-SSH-0.09
	Successfully installed String-ShellQuote-1.04
	Successfully installed Net-SCP-0.08
	5 distributions installed
	Complete! Modules were installed into /home/cabox/workspace/projects/test_carton/local

Notice, that after this step a file named cpanfile.snapshot has been generated, with all the modules and depencencies managed by Carton:
	 $ cat cpanfile.snapshot
	# carton snapshot format: version 1.0
	DISTRIBUTIONS
	  Archive-Zip-1.68
	    pathname: P/PH/PHRED/Archive-Zip-1.68.tar.gz
	    provides:
	      Archive::Zip 1.68
	      Archive::Zip::Archive 1.68
	      Archive::Zip::BufferedFileHandle 1.68
	      Archive::Zip::DirectoryMember 1.68
	      Archive::Zip::FileMember 1.68
	      Archive::Zip::Member 1.68
	      Archive::Zip::MemberRead 1.68
	      Archive::Zip::MockFileHandle 1.68
	      Archive::Zip::NewFileMember 1.68
	      Archive::Zip::StringMember 1.68
	      Archive::Zip::Tree 1.68
	      Archive::Zip::ZipFileMember 1.68
	    requirements:
	      Compress::Raw::Zlib 2.017
	      Encode 0
	      ExtUtils::MakeMaker 0
	      File::Basename 0
	      File::Copy 0
	      File::Find 0
	      File::Path 0
	      File::Spec 0.80
	      File::Temp 0
	      IO::File 0
	      IO::Handle 0
	      IO::Seekable 0
	      Time::Local 0
	      perl 5.006
	  Excel-Writer-XLSX-1.09
	    pathname: J/JM/JMCNAMARA/Excel-Writer-XLSX-1.09.tar.gz
	    provides:
	      Excel::Writer::XLSX 1.09
	      Excel::Writer::XLSX::Chart 1.09
	      Excel::Writer::XLSX::Chart::Area 1.09
	      Excel::Writer::XLSX::Chart::Bar 1.09
	      Excel::Writer::XLSX::Chart::Column 1.09
	      Excel::Writer::XLSX::Chart::Doughnut 1.09
	      Excel::Writer::XLSX::Chart::Line 1.09
	      Excel::Writer::XLSX::Chart::Pie 1.09
	      Excel::Writer::XLSX::Chart::Radar 1.09
	      Excel::Writer::XLSX::Chart::Scatter 1.09
	      Excel::Writer::XLSX::Chart::Stock 1.09
	      Excel::Writer::XLSX::Chartsheet 1.09
	      Excel::Writer::XLSX::Drawing 1.09
	      Excel::Writer::XLSX::Examples 1.09
	      Excel::Writer::XLSX::Format 1.09
	      Excel::Writer::XLSX::Package::App 1.09
	      Excel::Writer::XLSX::Package::Comments 1.09
	      Excel::Writer::XLSX::Package::ContentTypes 1.09
	      Excel::Writer::XLSX::Package::Core 1.09
	      Excel::Writer::XLSX::Package::Custom 1.09
	      Excel::Writer::XLSX::Package::Metadata 1.09
	      Excel::Writer::XLSX::Package::Packager 1.09
	      Excel::Writer::XLSX::Package::Relationships 1.09
	      Excel::Writer::XLSX::Package::SharedStrings 1.09
	      Excel::Writer::XLSX::Package::Styles 1.09
	      Excel::Writer::XLSX::Package::Table 1.09
	      Excel::Writer::XLSX::Package::Theme 1.09
	      Excel::Writer::XLSX::Package::VML 1.09
	      Excel::Writer::XLSX::Package::XMLwriter 1.09
	      Excel::Writer::XLSX::Shape 1.09
	      Excel::Writer::XLSX::Utility 1.09
	      Excel::Writer::XLSX::Workbook 1.09
	      Excel::Writer::XLSX::Worksheet 1.09
	    requirements:
	      Archive::Zip 1.3
	      ExtUtils::MakeMaker 0
	      File::Temp 0.19
	      IO::File 1.14
	  Net-SCP-0.08.reprise
	    pathname: I/IV/IVAN/Net-SCP-0.08.reprise.tar.gz
	    provides:
	      Net::SCP 0.08
	    requirements:
	      ExtUtils::MakeMaker 0
	      IO::Handle 0
	      Net::SSH 0
	      String::ShellQuote 0
	  Net-SSH-0.09
	    pathname: I/IV/IVAN/Net-SSH-0.09.tar.gz
	    provides:
	      Net::SSH 0.09
	    requirements:
	      ExtUtils::MakeMaker 0
	  String-ShellQuote-1.04
	    pathname: R/RO/ROSCH/String-ShellQuote-1.04.tar.gz
	    provides:
	      String::ShellQuote 1.04
	    requirements:
	      ExtUtils::MakeMaker 0

Don't forget to exclude the local/ directory and add the files cpanfile and cpanfile.snapshot to Your version control system!

At this point we have a package, which is not really portable. To make it portable, run

	$ carton bundle
	Bundling modules using /home/cabox/workspace/projects/test_carton/cpanfile
	Copying P/PH/PHRED/Archive-Zip-1.68.tar.gz
	Copying J/JM/JMCNAMARA/Excel-Writer-XLSX-1.09.tar.gz
	Copying I/IV/IVAN/Net-SCP-0.08.reprise.tar.gz
	Copying I/IV/IVAN/Net-SSH-0.09.tar.gz
	Copying R/RO/ROSCH/String-ShellQuote-1.04.tar.gz
	Writing /home/cabox/workspace/projects/test_carton/vendor/cache/modules/02packages.details.txt.gz
	Complete! Modules were bundled into /home/cabox/workspace/projects/test_carton/vendor/cache
	It will bundle your tar archives into the vendor/ directory.

Add vendor to You VCS or don't, it's up to You.

Now we are ready to deploy the package to a different machine.

=head2 Task 3 - Deploying your package to the remote machines:

Copy th whole directory to the target systems to the desired directory.

This is the directory structure You should see (without Your own stuff):
			.
			|-- cpanfile
			|-- cpanfile.snapshot
			|-- ...  #Your stuff here
		 	|-- ...	 #Your stuff here
		    	`-- vendor
		    		`-- cache
				    |-- authors
				    `-- modules

Now it's time to install the modules using carton:

	$ carton install --deployment cached

This will use the module tarballs in the vendor/ directory and create a local/ folder with the installed modules

If no errors remove the vendor directory (optional).

Santa reviewed the proof of concept and was proud of Tonttu for doing such a great job. 
After moving the solution to production, all the elves started to use the Carton packaging module and their job got a lot easier.
Santa was also satisfied and happy, as they could fulfill more children's wishes much much quicker than before. 
